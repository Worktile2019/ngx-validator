{"version":3,"sources":["webpack:///./packages/core/src/directives/form-submit.directive.ts","webpack:///./packages/core/src/directives/form-validator.directive.ts","webpack:///./packages/core/src/helpers.ts","webpack:///./packages/core/src/module.ts","webpack:///./packages/core/src/public_api.ts","webpack:///./packages/core/src/validator-loader.service.ts","webpack:///./packages/core/src/validator.class.ts","webpack:///./packages/core/src/validator.service.ts","webpack:///./packages/integration/src/$_lazy_route_resource lazy namespace object","webpack:///./packages/integration/src/app/app.component.html","webpack:///./packages/integration/src/app/app.component.scss","webpack:///./packages/integration/src/app/app.component.ts","webpack:///./packages/integration/src/app/app.module.ts","webpack:///./packages/integration/src/environments/environment.ts","webpack:///./packages/integration/src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Directive, ElementRef, Output, OnInit, HostBinding, HostListener, Optional, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './form-validator.directive';\n\n@Directive({\n    selector: '[ngxFormSubmit],[ngx-form-submit]'\n})\nexport class NgxFormSubmitDirective implements OnInit {\n\n    @Output() ngxFormSubmit = new EventEmitter();\n\n    constructor(\n        private ngForm: NgForm,\n        private validatorDirective: NgxFormValidatorDirective\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.validatorDirective.onSubmitSuccess = ($event: any) => {\n            this.ngxFormSubmit.emit($event);\n        };\n    }\n\n    @HostListener('click', ['$event'])\n    onSubmit($event: any) {\n        this.validatorDirective.submit($event);\n    }\n}\n","import {\n    Directive,\n    OnInit,\n    NgZone,\n    Renderer2,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { NgxFormValidatorService } from '../validator.service';\nimport { NgForm } from '@angular/forms';\nimport { NgxFormValidatorConfig } from '../validator.class';\n\nconst KEY_CODES_ENTER = 13;\n\n// 1. submit 按 Enter 键提交, Textare 除外，需要按 Ctrl | Command + Enter 提交\n// 2. alwaysSubmit 不管是哪个元素 按 Enter 键都提交\n// 3. forbidSubmit \bEnter 键禁止提交\n// 默认 submit\nexport enum NgxEnterKeyMode {\n    submit = 'submit',\n    alwaysSubmit = 'alwaysSubmit',\n    forbidSubmit = 'forbidSubmit'\n}\n\n@Directive({\n    selector: 'form[ngxFormValidator],form[ngx-form-validator]',\n    providers: [NgxFormValidatorService]\n})\nexport class NgxFormValidatorDirective implements OnInit {\n    private unsubscribe: () => void;\n\n    onSubmitSuccess: ($event: any) => void;\n\n    @Input() enterKeyMode: NgxEnterKeyMode;\n\n    @Input()\n    set ngxFormValidatorConfig(config: NgxFormValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    constructor(\n        private ngZone: NgZone,\n        private renderer: Renderer2,\n        private elementRef: ElementRef,\n        private validator: NgxFormValidatorService,\n        private ngForm: NgForm\n    ) {}\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.unsubscribe = this.renderer.listen(\n                this.elementRef.nativeElement,\n                'keydown',\n                this.onKeydown.bind(this)\n            );\n        });\n\n        this.validator.initialize(this.ngForm, this.elementRef.nativeElement);\n    }\n\n    submit($event: Event) {\n        if (this.validator.validate($event) && this.onSubmitSuccess) {\n            this.onSubmitSuccess($event);\n        }\n    }\n\n    submitRunInZone($event: Event) {\n        this.ngZone.run(() => {\n            this.submit($event);\n        });\n    }\n\n    onKeydown($event: KeyboardEvent) {\n        const currentInput = document.activeElement;\n        const key = $event.which || $event.keyCode;\n        if (key === KEY_CODES_ENTER && currentInput.tagName) {\n            if (\n                !this.enterKeyMode ||\n                this.enterKeyMode === NgxEnterKeyMode.submit\n            ) {\n                // TEXTAREA Ctrl + Enter 或者 Command + Enter 阻止\b默认行为并提交\n                if (currentInput.tagName === 'TEXTAREA') {\n                    if ($event.ctrlKey || $event.metaKey) {\n                        $event.preventDefault();\n                        this.submitRunInZone($event);\n                    }\n                } else {\n                    // 不是 TEXTAREA Enter 阻止\b默认行为并提交\n                    $event.preventDefault();\n                    this.submitRunInZone($event);\n                }\n            } else if (this.enterKeyMode === NgxEnterKeyMode.alwaysSubmit) {\n                $event.preventDefault();\n                this.submitRunInZone($event);\n            } else {\n                // do nothing\n            }\n        }\n    }\n}\n","export function isFunction(value: any) {\n    const type = typeof value;\n    return !!value && type === 'function';\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './directives/form-validator.directive';\nimport { NgxFormSubmitDirective } from './directives/form-submit.directive';\nimport {\n    NgxFormValidatorGlobalConfig,\n    NGX_VALIDATOR_CONFIG\n} from './validator.class';\n\n@NgModule({\n    declarations: [NgxFormValidatorDirective, NgxFormSubmitDirective],\n    imports: [FormsModule],\n    exports: [NgxFormValidatorDirective, NgxFormSubmitDirective, FormsModule]\n})\nexport class NgxValidatorModule {\n    static forRoot(config: NgxFormValidatorGlobalConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxValidatorModule,\n            providers: [\n                {\n                    provide: NGX_VALIDATOR_CONFIG,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\n","/*\n * Public API Surface of core\n */\n\nexport * from './module';\nexport * from './validator-loader.service';\nexport * from './validator.class';\nexport * from './directives/form-validator.directive';\nexport * from './directives/form-submit.directive';\n","import { InjectionToken, Inject, Injectable, Optional } from '@angular/core';\nimport {\n    NgxFormValidatorGlobalConfig,\n    NgxFormValidationMessages,\n    Dictionary,\n    NGX_VALIDATOR_CONFIG\n} from './validator.class';\nimport { ValidationErrors } from '@angular/forms';\nimport * as helpers from './helpers';\n\nconst INVALID_CLASS = 'is-invalid';\nconst INVALID_FEEDBACK_CLASS = 'invalid-feedback';\n\nconst defaultValidatorConfig: NgxFormValidatorGlobalConfig = {\n    showElementError: true,\n    removeElementError: true,\n    validationMessages: {}\n};\n\nconst globalValidationMessages = {\n    required: '该选项不能为空',\n    maxlength: '该选项输入值长度不能大于{maxlength}',\n    minlength: '该选项输入值长度不能小于{minlength}',\n    thyUniqueCheck: '输入值已经存在，请重新输入',\n    email: '输入邮件的格式不正确',\n    repeat: '两次输入不一致',\n    pattern: '该选项输入格式不正确',\n    number: '必须输入数字',\n    url: '输入URL格式不正确',\n    max: '该选项输入值不能大于{max}',\n    min: '该选项输入值不能小于{min}'\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxValidatorLoader {\n    private config: NgxFormValidatorGlobalConfig;\n\n    private _getDefaultValidationMessage(key: string) {\n        if (\n            this.config.globalValidationMessages &&\n            this.config.globalValidationMessages[key]\n        ) {\n            return this.config.globalValidationMessages[key];\n        } else {\n            return globalValidationMessages[key];\n        }\n    }\n\n    constructor(\n        @Optional()\n        @Inject(NGX_VALIDATOR_CONFIG)\n        config: NgxFormValidatorGlobalConfig\n    ) {\n        this.config = Object.assign({}, defaultValidatorConfig, config);\n    }\n\n    get validationMessages() {\n        return this.config.validationMessages;\n    }\n\n    getErrorMessage(name: string, key: string) {\n        if (\n            this.validationMessages[name] &&\n            this.validationMessages[name][key]\n        ) {\n            return this.validationMessages[name][key];\n        } else {\n            return this._getDefaultValidationMessage(key);\n        }\n    }\n\n    getErrorMessages(name: string, validationErrors: ValidationErrors) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this.getErrorMessage(name, validationError));\n            }\n        }\n        return messages;\n    }\n\n    defaultShowError(element: any, errorMessages: string[]) {\n        if (element && element.parentElement) {\n            const documentFrag = document.createDocumentFragment();\n            const divNode = document.createElement('DIV');\n            const textNode = document.createTextNode(errorMessages[0]);\n            divNode.appendChild(textNode);\n            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);\n            documentFrag.appendChild(divNode);\n            element.parentElement.append(documentFrag);\n        }\n    }\n\n    defaultRemoveError(element: HTMLElement) {\n        if (element && element.parentElement) {\n            const invalidFeedback = element.parentElement.querySelector(\n                '.invalid-feedback'\n            );\n            element.parentElement.removeChild(invalidFeedback);\n        }\n    }\n\n    removeError(element: HTMLElement) {\n        element.classList.remove(INVALID_CLASS);\n        if (helpers.isFunction(this.config.removeElementError)) {\n            (this.config.showElementError as any)(element);\n        } else if (this.config.showElementError) {\n            this.defaultRemoveError(element);\n        } else {\n            // do nothings\n        }\n    }\n\n    showError(element: HTMLElement, errorMessages: string[]) {\n        element.classList.add(INVALID_CLASS);\n        if (helpers.isFunction(this.config.showElementError)) {\n            (this.config.showElementError as any)(element, errorMessages);\n        } else if (this.config.showElementError) {\n            this.defaultShowError(element, errorMessages);\n        } else {\n            // do nothings\n        }\n    }\n\n    addValidationMessages(messages: NgxFormValidationMessages) {\n        Object.assign(this.config.validationMessages, messages);\n    }\n\n    setGlobalValidationMessages(validationMessages: Dictionary<string>) {\n        this.config.globalValidationMessages = validationMessages;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface Dictionary<T> {\n    [key: string]: T;\n}\n\nexport declare type NgxFormValidationMessages = Dictionary<Dictionary<string>>;\n\nexport interface NgxFormValidatorConfig {\n    showElementError?:\n        | boolean\n        | ((element: HTMLElement, errorMessages: string[]) => void);\n    removeElementError?: boolean | ((element: HTMLElement) => void);\n    validationMessages?: NgxFormValidationMessages;\n}\nexport interface NgxFormValidatorGlobalConfig extends NgxFormValidatorConfig {\n    globalValidationMessages?: Dictionary<string>;\n}\n\nexport const NGX_VALIDATOR_CONFIG = new InjectionToken<\nNgxFormValidatorGlobalConfig\n>('NGX_VALIDATION_CONFIG');\n","import { Injectable } from '@angular/core';\nimport { NgForm, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { NgxValidatorLoader } from './validator-loader.service';\nimport { NgxFormValidatorConfig, Dictionary } from './validator.class';\n\n@Injectable()\nexport class NgxFormValidatorService {\n    private _ngForm: NgForm;\n\n    private _formElement: HTMLElement;\n\n    private _config: NgxFormValidatorConfig;\n\n    // public errors: string[];\n\n    // 记录所有元素的验证信息\n    public validations: Dictionary<{\n        hasError?: boolean;\n        errorMessages?: string[];\n    }> = {};\n\n    private _getElement(name: string) {\n        const element = this._formElement[name];\n        if (element) {\n            return element;\n        } else {\n            return this._formElement.querySelector(`[name='${name}']`);\n        }\n    }\n\n    private _clearElementError(name: string) {\n        if (this.validations[name] && this.validations[name].hasError) {\n            this.validations[name].hasError = false;\n            this.validations[name].errorMessages = [];\n            this.thyFormValidateLoader.removeError(this._getElement(name));\n        }\n    }\n\n    private _tryGetValidation(name: string) {\n        if (!this.validations[name]) {\n            this._initializeFormControlValidation(\n                name,\n                this._ngForm.controls[name]\n            );\n        }\n        return this.validations[name];\n    }\n\n    private _initializeFormControlValidation(\n        name: string,\n        control: AbstractControl\n    ) {\n        this.validations[name] = {\n            hasError: false,\n            errorMessages: []\n        };\n        control.valueChanges.subscribe(() => {\n            this._clearElementError(name);\n        });\n    }\n\n    private _restFormControlValidation(name: string) {\n        const validation = this.validations[name];\n        if (validation) {\n            validation.hasError = false;\n            validation.errorMessages = [];\n        }\n    }\n\n    private _getValidationMessage(name: string, validationError: string) {\n        if (\n            this._config &&\n            this._config.validationMessages &&\n            this._config.validationMessages[name] &&\n            this._config.validationMessages[name][validationError]\n        ) {\n            return this._config.validationMessages[name][validationError];\n        }\n        return this.thyFormValidateLoader.getErrorMessage(\n            name,\n            validationError\n        );\n    }\n\n    private _getValidationMessages(\n        name: string,\n        validationErrors: ValidationErrors\n    ) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(\n                    this._getValidationMessage(name, validationError)\n                );\n            }\n        }\n        return messages;\n    }\n\n    private _setControlValidationError(name: string, errorMessages: string[]) {\n        const validation = this._tryGetValidation(name);\n        validation.errorMessages = errorMessages;\n        validation.hasError = true;\n        this.thyFormValidateLoader.showError(\n            this._getElement(name),\n            errorMessages\n        );\n    }\n\n    constructor(private thyFormValidateLoader: NgxValidatorLoader) {}\n\n    initialize(ngForm: NgForm, formElement: HTMLElement) {\n        this._ngForm = ngForm;\n        this._formElement = formElement;\n    }\n\n    setValidatorConfig(config: NgxFormValidatorConfig) {\n        this._config = config;\n    }\n\n    validateControl(name: string) {\n        this._clearElementError(name);\n        const control = this._ngForm.controls[name];\n        if (control && control.invalid) {\n            const errorMessages = this._getValidationMessages(\n                name,\n                control.errors\n            );\n            this._setControlValidationError(name, errorMessages);\n        }\n    }\n\n    validateControls() {\n        // 主要是 无法检测到 ngForm 的 controls 的变化，或者是我没有找到\n        // 验证的时候循环 ngForm 的 controls 验证\n        // 发现没有 validation 初始化一个，已经存在不会重新初始化，保存缓存数据\n        for (const name in this._ngForm.controls) {\n            if (this._ngForm.controls.hasOwnProperty(name)) {\n                this._tryGetValidation(name);\n                this.validateControl(name);\n            }\n        }\n        // 移除已经不存在的 validation\n        const names = Object.keys(this.validations);\n        names.forEach(name => {\n            if (!this._ngForm.controls[name]) {\n                delete this.validations[name];\n            }\n        });\n    }\n\n    validate($event?: Event): boolean {\n        this._ngForm.onSubmit($event);\n        this.validateControls();\n        return this._ngForm.valid;\n    }\n\n    reset() {\n        this._ngForm.reset();\n        for (const name in this.validations) {\n            if (this.validations.hasOwnProperty(name)) {\n                this._restFormControlValidation(name);\n                this._clearElementError(name);\n            }\n        }\n    }\n\n    setElementErrorMessage(name: string, message: string) {\n        this._clearElementError(name);\n        this._setControlValidationError(name, [message]);\n    }\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./packages/integration/src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"container\\\">\\n    <h2 class=\\\"title\\\">@why520crazy/ngx-validator Example</h2>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm\\\">\\n            <form name=\\\"exampleForm\\\" novalidate ngx-form-validator [ngxFormValidatorConfig]=\\\"validatorConfig\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"email1\\\">Email address</label>\\n                    <input\\n                        type=\\\"email\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"email\\\"\\n                        id=\\\"email1\\\"\\n                        [(ngModel)]=\\\"model.email\\\"\\n                        required\\n                        aria-describedby=\\\"emailHelp\\\"\\n                        placeholder=\\\"Enter email\\\"\\n                    />\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\">Username</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"username\\\"\\n                        required\\n                        pattern=\\\"^[A-Za-z]{1}[0-9A-Za-z_]{1,19}\\\"\\n                        name=\\\"username\\\"\\n                        [(ngModel)]=\\\"model.username\\\"\\n                        placeholder=\\\"Enter username\\\"\\n                    />\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"exampleInputPassword1\\\">Password</label>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"model.password\\\"\\n                        name=\\\"password\\\"\\n                        required\\n                        id=\\\"exampleInputPassword1\\\"\\n                        placeholder=\\\"Password\\\"\\n                    />\\n                </div>\\n                <div class=\\\"form-group\\\" *ngIf=\\\"message\\\">\\n                    <div class=\\\"alert alert-success\\\">{{ message }}</div>\\n                </div>\\n                <button\\n                    type=\\\"button\\\"\\n                    (ngxFormSubmit)=\\\"submit()\\\"\\n                    class=\\\"btn btn-primary\\\"\\n                >\\n                    Submit\\n                </button>\\n            </form>\\n        </div>\\n        <div class=\\\"col-sm\\\">Code</div>\\n    </div>\\n</div>\\n\"","module.exports = \".container {\\n  margin-top: 30px; }\\n  .container .title {\\n    text-align: center;\\n    margin-bottom: 30px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYWlmZW5nL0lULzAxX1N0dWR5L3Byb2plY3RzL25neC12YWxpZGF0b3IvcGFja2FnZXMvaW50ZWdyYXRpb24vc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7RUFFUSxpQkFBUyxFQU1oQjtFQVJEO0lBS1EsbUJBQWtCO0lBQ2xCLG9CQUFtQixFQUN0QiIsImZpbGUiOiJwYWNrYWdlcy9pbnRlZ3JhdGlvbi9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC5leGFtcGxlLWNhcmQge1xuLy8gICB3aWR0aDogNjAwcHg7XG4vLyAgIGhlaWdodDogODAwcHg7XG4vLyB9XG5cbi5jb250YWluZXIge1xuICAgIG1hcmdpbjoge1xuICAgICAgICB0b3A6IDMwcHg7XG4gICAgfVxuICAgIC50aXRsZSB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICB9XG59XG4iXX0= */\"","import { Component } from '@angular/core';\nimport { NgxFormValidatorConfig } from '../../../core/src/public_api';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    message = '';\n\n    model = {\n        username: '',\n        email: '',\n        password: ''\n    };\n\n    validatorConfig: NgxFormValidatorConfig = {\n        validationMessages: {\n            username: {\n                required: '用户名不能为空',\n                pattern:'用户名格式不正确，以字母，数字，下划线组成，首字母不能位数字，必须是2-20个字符'\n            }\n        }\n    };\n\n    setMessage(message: string) {\n        this.message = message;\n    }\n\n    submit() {\n        this.setMessage('This form has submit');\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxValidatorModule } from '../../../core/src/public_api';\n\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n    declarations: [AppComponent],\n    imports: [BrowserModule, FormsModule, NgxValidatorModule],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}